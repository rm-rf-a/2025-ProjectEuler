Problem 362

1일차
한국 프로젝트 오일러에 푼사람 한명밖에없어서 풀어보면 재밋을듯
뭔가 보일듯말듯하는데 숫자가 말도안되게커서 풀기 힘들어보임

2일차
소인수분해까지 일단 구현함
얘 떄문에 밤에 잠도 못자고 학교에서도 수업안들림;;
생각해낸방법
  i번안)
    - 소인수분해한다.
    - 중복없이 더해낸다.
    ex)  2*2*3*3*3*19 
          3이 3개이니까 [3]*[3]*[3]을 놓고 생각한다
          그다음으로 많은 2를 놓고 [3]*[3]*[3]*2*2, [3]*[3]*[3*2]*2 , [3]*[3*2]*[3*2] 순으로 조합을 만든다.
          그다음을 많은 19를 놓고 재귀함수를 이용해서 같은 방법을 한개씩 밀어넣으면서 더한다.
          (중복이 생기는지 뺴먹는 경우가 있는지 잘 모르겠음)

  ii번안)
    - 소인수분해한다.
    - 소수의 종류와 갯수를 구한다
        - 가장많은 갯수가 최소로 곱해질 수 있는 칸의 갯수
        - 총 소수 갯수가 가장 많은 칸으로 곱하는경우의 갯수
    - 전체경우를 구한뒤에 빼낸다.
    ex)  2*2*3*3*3*19 
        3이 가장 3개로 가장 많으니까
         [] * [] * [] 로 3개가 최소갯수
        총 소인수분해한 갯수가 6개니까
         [] * [] * [] * [] * [] * [] 로 6개가 최대갯수
         3~6칸의 경우를 구하면 된다,
        중복조합공식을 잘 사용하여 3~6칸일 떄 구하고 같은 소수가 한칸에 두개이상들어간 경우를 뺸다 (서순이 달라도 같은조합임에 유의)

  iii번안) 학교에서 떠올렸는데 기억이안난다...
          별로 좋은 방법은 아니였던듯..... 
          다 구하고 제곱인거만 뺸다였던거같음





ai 1번안)
from math import isqrt
from functools import lru_cache

# 제곱청정수인지 판별하는 함수
def is_squarefree(n):
    for i in range(2, isqrt(n) + 1):
        if n % (i * i) == 0:
            return False
    return True

# 제곱청정수 리스트 미리 생성
def generate_squarefree_list(limit):
    return [i for i in range(2, limit + 1) if is_squarefree(i)]

# 메모이제이션으로 Fsf(n) 계산
@lru_cache(maxsize=None)
def Fsf(n, max_factor=None):
    if n == 1:
        return 1
    count = 0
    if max_factor is None:
        max_factor = n
    for f in squarefree_list:
        if f > max_factor or f > n:
            break
        if n % f == 0:
            count += Fsf(n // f, f)
    return count

# 메인 계산 함수
def S(limit):
    total = 0
    for n in range(2, limit + 1):
        total += Fsf(n)
    return total

# 예시 실행
limit = 10**8  # 문제의 목표
squarefree_list = generate_squarefree_list(limit)

# 주의: 매우 느릴 수 있으므로 작은 수부터 테스트 권장
# print(S(100))         # => 193
# print(S(10**8))       # 최종 정답 (매우 오래 걸림)


2번안
def compute_mu(limit):
    mu = [1] * (limit + 1)
    is_prime = [True] * (limit + 1)
    for i in range(2, limit + 1):
        if is_prime[i]:
            for j in range(i, limit + 1, i):
                is_prime[j] = False
                mu[j] *= -1
            for j in range(i * i, limit + 1, i * i):
                mu[j] = 0
    return mu

def compute_S(limit):
    mu = compute_mu(limit)
    result = 0
    for d in range(1, limit + 1):
        if mu[d] == 0:
            continue
        result += mu[d] * (pow(2, limit // d) - 1 - (limit // d))
    return result

# 예시 실행
print("S(100) =", compute_S(100))          # 193
# print("S(10^8) =", compute_S(10**8))     # 매우 빠르게 계산됨!

-------

제곱청정수 판별 함수 작성

정수 분할 (factorization) 중 제곱청정수만 포함하는 경우만 카운트

동적 프로그래밍(DP)을 사용하여 중복계산 방지
순으로 푸는데 결국 제일 비효율적이라고 생각했던 3번안이 맞았네ㅋㅋ;;
ai 2안에서는 1안하고 기본원리는 같은데 뫼비우스함수하고 Dirichlet 곱셈과 제곱청정수의 갯수를 잘 조합해서 푸는듯

def compute_mu(limit):
    mu = [1] * (limit + 1)
    is_prime = [True] * (limit + 1)
    for i in range(2, limit + 1):
        if is_prime[i]:
            for j in range(i, limit + 1, i):
                is_prime[j] = False
                mu[j] *= -1
            for j in range(i * i, limit + 1, i * i):
                mu[j] = 0
    return mu

def compute_S(limit):
    mu = compute_mu(limit)
    result = 0
    for d in range(1, limit + 1):
        if mu[d] == 0:
            continue
        result += mu[d] * (pow(2, limit // d) - 1 - (limit // d))
    return result

# 실행
print("S(10^8) =", compute_S(10**8))

최적화좀했음.
솔직히 방법자체가 진짜 비효율적이라 생각함.

-------------------------------------------------------------------------------------------------------------------
(학교에서 풀던 방법)
#from sympy.ntheory import factorint

n = 101
arr1 = [1 for i in range(n)]
prime = []
for i in range(2,int(n**0.5+1),1):
    for u in range(2*i,n,i):
        arr1[u]=0
        
for i in range(2,len(arr1),1):
    if arr1[i] == 1:
        prime.append(i)

        

def factorization (x) :
    factorization_list = []
    i=0
    while x>1:
        if x%prime[i]==0:
            factorization_list.append(prime[i])
            x = x//prime[i]
            i=0
        else :
            i=i+1
    return factorization_list

print(factorization(54))
소인수분해함. 이제 생각해보자~~
-------------------------------------------------------------------------------------------------------------------

  
